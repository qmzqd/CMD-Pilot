[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Listbox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Scrollbar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Scrollbar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ConsolePanel",
        "importPath": "cmd_pilot.ui.components.console",
        "description": "cmd_pilot.ui.components.console",
        "isExtraImport": true,
        "detail": "cmd_pilot.ui.components.console",
        "documentation": {}
    },
    {
        "label": "TopBar",
        "importPath": "cmd_pilot.ui.components.top_bar",
        "description": "cmd_pilot.ui.components.top_bar",
        "isExtraImport": true,
        "detail": "cmd_pilot.ui.components.top_bar",
        "documentation": {}
    },
    {
        "label": "CommandHistory",
        "importPath": "cmd_pilot.ui.components.command_history",
        "description": "cmd_pilot.ui.components.command_history",
        "isExtraImport": true,
        "detail": "cmd_pilot.ui.components.command_history",
        "documentation": {}
    },
    {
        "label": "CommandValidator",
        "importPath": "cmd_pilot.utils.security",
        "description": "cmd_pilot.utils.security",
        "isExtraImport": true,
        "detail": "cmd_pilot.utils.security",
        "documentation": {}
    },
    {
        "label": "CommandValidator",
        "importPath": "cmd_pilot.utils.security",
        "description": "cmd_pilot.utils.security",
        "isExtraImport": true,
        "detail": "cmd_pilot.utils.security",
        "documentation": {}
    },
    {
        "label": "SecurityError",
        "importPath": "cmd_pilot.utils.security",
        "description": "cmd_pilot.utils.security",
        "isExtraImport": true,
        "detail": "cmd_pilot.utils.security",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "importPath": "cmd_pilot.utils.error_handler",
        "description": "cmd_pilot.utils.error_handler",
        "isExtraImport": true,
        "detail": "cmd_pilot.utils.error_handler",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "importPath": "cmd_pilot.utils.error_handler",
        "description": "cmd_pilot.utils.error_handler",
        "isExtraImport": true,
        "detail": "cmd_pilot.utils.error_handler",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "MODEL_CONFIGS",
        "importPath": "cmd_pilot.config",
        "description": "cmd_pilot.config",
        "isExtraImport": true,
        "detail": "cmd_pilot.config",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "CommandHistory",
        "kind": 6,
        "importPath": "ui.components.command_history",
        "description": "ui.components.command_history",
        "peekOfCode": "class CommandHistory(Frame):\n    \"\"\"Component for displaying and managing command history\"\"\"\n    def __init__(self, master, max_history: int = 100, **kwargs):\n        super().__init__(master, **kwargs)\n        self.max_history = max_history\n        self._init_ui()\n        self.history: List[str] = []\n    def _init_ui(self):\n        self.listbox = Listbox(self)\n        self.scrollbar = Scrollbar(self, orient=\"vertical\")",
        "detail": "ui.components.command_history",
        "documentation": {}
    },
    {
        "label": "ConsolePanel",
        "kind": 6,
        "importPath": "ui.components.console_panel",
        "description": "ui.components.console_panel",
        "peekOfCode": "class ConsolePanel(Frame):\n    \"\"\"Enhanced console panel with improved error handling and async support.\"\"\"\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self._init_ui()\n        self._setup_bindings()\n        self._configure_tags()\n    def _init_ui(self):\n        # Main text widget with improved scrolling\n        self.text = Text(self, wrap='word', undo=True)",
        "detail": "ui.components.console_panel",
        "documentation": {}
    },
    {
        "label": "ModernUI",
        "kind": 6,
        "importPath": "ui.main_window",
        "description": "ui.main_window",
        "peekOfCode": "class ModernUI(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self._init_components()\n        self.command_validator = CommandValidator()\n    def _init_components(self):\n        \"\"\"Initialize all UI components using factory methods\"\"\"\n        self._init_top_bar()\n        self._init_console()\n        self._init_command_history()",
        "detail": "ui.main_window",
        "documentation": {}
    },
    {
        "label": "AsyncExecutor",
        "kind": 6,
        "importPath": "utils.async_executor",
        "description": "utils.async_executor",
        "peekOfCode": "class AsyncExecutor:\n    def __init__(self):\n        self.loop = asyncio.new_event_loop()\n        self.executor = ThreadPoolExecutor(max_workers=4)\n    async def run_blocking(self, func, *args):\n        \"\"\"Execute blocking functions asynchronously\"\"\"\n        return await self.loop.run_in_executor(\n            self.executor, \n            partial(func, *args)\n        )",
        "detail": "utils.async_executor",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "kind": 6,
        "importPath": "utils.error_handler",
        "description": "utils.error_handler",
        "peekOfCode": "class ErrorHandler:\n    \"\"\"错误处理工具类\"\"\"\n    @staticmethod\n    def log_error(error: Exception, context: str = None) -> None:\n        \"\"\"记录错误日志\n        Args:\n            error: 异常对象\n            context: 错误上下文信息\n        \"\"\"\n        error_msg = f\"[{context}] {str(error)}\" if context else str(error)",
        "detail": "utils.error_handler",
        "documentation": {}
    },
    {
        "label": "SecurityError",
        "kind": 6,
        "importPath": "utils.security",
        "description": "utils.security",
        "peekOfCode": "class SecurityError(Exception):\n    \"\"\"安全验证异常\"\"\"\n    def __init__(self, message: str, command: str = None, risk_level: str = None):\n        super().__init__(message)\n        self.command = command\n        self.risk_level = risk_level  # 新增风险等级属性\nclass CommandValidator:\n    \"\"\"命令验证器\"\"\"\n    PRIVILEGE_PATTERNS = {\n        'privilege_escalation': [",
        "detail": "utils.security",
        "documentation": {}
    },
    {
        "label": "CommandValidator",
        "kind": 6,
        "importPath": "utils.security",
        "description": "utils.security",
        "peekOfCode": "class CommandValidator:\n    \"\"\"命令验证器\"\"\"\n    PRIVILEGE_PATTERNS = {\n        'privilege_escalation': [\n            r'\\bsudo\\s+\\w+',\n            r'\\bpkexec\\s+\\w+',\n            r'\\bdoas\\s+\\w+',\n            r'\\bStart-Process\\s+.*-Verb\\s+RunAs',\n            r'[;|&amp;]\\s*[;|&amp;]'  # 严格匹配命令连接符\n        ],",
        "detail": "utils.security",
        "documentation": {}
    },
    {
        "label": "CommandContext",
        "kind": 6,
        "importPath": "command_engine",
        "description": "command_engine",
        "peekOfCode": "class CommandContext:\n    \"\"\"Context manager for command execution environment\"\"\"\n    def __init__(self):\n        self.env = os.environ.copy()\n        self.cwd = os.getcwd()\n        self.umask = os.umask(0o077)  # 设置严格默认权限\n        os.umask(self.umask)  # 还原原始umask\n    def __enter__(self):\n        os.chdir(tempfile.mkdtemp())  # 进入临时目录\n        return self",
        "detail": "command_engine",
        "documentation": {}
    },
    {
        "label": "CommandEngine",
        "kind": 6,
        "importPath": "command_engine",
        "description": "command_engine",
        "peekOfCode": "class CommandEngine:\n    \"\"\"Enhanced command engine with AI generation and security validation\"\"\"\n    def __init__(self, model_id: str):\n        if model_id not in MODEL_CONFIGS:\n            raise ValueError(f\"Unsupported model: {model_id}\")\n        self.model_id = model_id\n        self.config = MODEL_CONFIGS[model_id]\n        self._validate_env()\n        self.validator = CommandValidator()\n    def _validate_env(self):",
        "detail": "command_engine",
        "documentation": {}
    },
    {
        "label": "ModelConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ModelConfig(TypedDict):\n    base_url: str\n    model: str\n    name: str\n    env_vars: List[str]\n    api_type: str\nclass SafetyRule(TypedDict):\n    patterns: List[str]\n    color: str\nclass ThemeConfig(TypedDict):",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SafetyRule",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class SafetyRule(TypedDict):\n    patterns: List[str]\n    color: str\nclass ThemeConfig(TypedDict):\n    bg: str\n    text: str\n    text_secondary: str\n    primary: str\n    success: str\n    warning: str",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ThemeConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ThemeConfig(TypedDict):\n    bg: str\n    text: str\n    text_secondary: str\n    primary: str\n    success: str\n    warning: str\n    error: str\n    font_family: str\n    font_size: int",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "UIStyle",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class UIStyle(TypedDict):\n    TButton: Dict[str, Any]\n    TCombobox: Dict[str, Any]\nMODEL_CONFIGS = {\n    \"moonshot\": {\n        \"base_url\": \"https://api.moonshot.cn/v1\",\n        \"model\": \"moonshot-v1-8k\",\n        \"name\": \"Moonshot AI\",\n        \"env_vars\": [\"MOONSHOT_API_KEY\"],\n        \"api_type\": \"openai\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MODEL_CONFIGS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MODEL_CONFIGS = {\n    \"moonshot\": {\n        \"base_url\": \"https://api.moonshot.cn/v1\",\n        \"model\": \"moonshot-v1-8k\",\n        \"name\": \"Moonshot AI\",\n        \"env_vars\": [\"MOONSHOT_API_KEY\"],\n        \"api_type\": \"openai\"\n    },\n    \"spark\": {\n        \"base_url\": \"https://spark-api.xf-yun.com/v1.1\",",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "UI_THEME",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "UI_THEME = {\n    \"bg\": \"#f5f5f5\",\n    \"text\": \"#333333\",\n    \"text_secondary\": \"#666666\",\n    \"primary\": \"#4a6baf\",\n    \"success\": \"#5cb85c\",\n    \"warning\": \"#f0ad4e\",\n    \"error\": \"#d9534f\",\n    \"font_family\": \"Microsoft YaHei\",\n    \"font_size\": 12",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "UI_STYLE",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "UI_STYLE = {\n    \"TButton\": {\n        \"padding\": (10, 5),\n        \"borderwidth\": 1,\n        \"relief\": \"raised\"\n    },\n    \"TCombobox\": {\n        \"padding\": (5, 2),\n        \"borderwidth\": 1\n    }",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SETTINGS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DEFAULT_SETTINGS = {\n    \"show_raw_output\": False,\n    \"max_risk_level\": \"medium\"\n}\nALLOWED_COMMANDS = [\"ls\", \"cd\", \"pwd\", \"cat\", \"grep\", \"find\", \"echo\"]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ALLOWED_COMMANDS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "ALLOWED_COMMANDS = [\"ls\", \"cd\", \"pwd\", \"cat\", \"grep\", \"find\", \"echo\"]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "kind": 6,
        "importPath": "error_handler",
        "description": "error_handler",
        "peekOfCode": "class ErrorHandler:\n    @classmethod\n    def handle_api_error(cls, exc: Exception) -> str:\n        \"\"\"Enhanced error handler for API-related exceptions\"\"\"\n        error_map = {\n            requests.Timeout: \"API请求超时，请检查网络连接\",\n            requests.HTTPError: lambda e: f\"HTTP错误: {e.response.status_code}\",\n            json.JSONDecodeError: \"无效的API响应格式\"\n        }\n        return error_map.get(type(exc), str(exc))",
        "detail": "error_handler",
        "documentation": {}
    },
    {
        "label": "CommandValidator",
        "kind": 6,
        "importPath": "security",
        "description": "security",
        "peekOfCode": "class CommandValidator:\n    \"\"\"Centralized command validation with comprehensive security checks\"\"\"\n    BLACKLISTED_PATTERNS = [\n        # Combined command control patterns\n        r'[&|;]\\s*[&|;]',  # command chaining/separators\n        r'[`$]\\s*\\(.*\\)|\\$\\{.*\\}',  # command substitution\n        r'\\|\\s*[a-z]',  # piping to commands\n        # Dangerous operations\n        r'(rm|del)\\s+-[rf]|[sq]',  # recursive/file deletion\n        r'chmod\\s+[0-7]{3,4}',  # permission changes",
        "detail": "security",
        "documentation": {}
    },
    {
        "label": "SecurityError",
        "kind": 6,
        "importPath": "security",
        "description": "security",
        "peekOfCode": "class SecurityError(Exception):\n    \"\"\"Custom exception for security violations\"\"\"\n    def __init__(self, message: str, command: str = None):\n        super().__init__(message)\n        self.command = command\n        self.message = f\"Security violation: {message}\"\n        if command:\n            self.message += f\" in command: {command}\"\ndef sanitize_command(command: str) -> str:\n    \"\"\"Centralized command sanitization with strict validation\"\"\"",
        "detail": "security",
        "documentation": {}
    },
    {
        "label": "sanitize_command",
        "kind": 2,
        "importPath": "security",
        "description": "security",
        "peekOfCode": "def sanitize_command(command: str) -> str:\n    \"\"\"Centralized command sanitization with strict validation\"\"\"\n    command = command.strip()\n    validator = CommandValidator()\n    if not validator.is_safe(command):\n        risk = validator.assess_risk(command)\n        raise SecurityError(\n            f\"Command rejected (risk: {risk['level']})\", \n            command\n        )",
        "detail": "security",
        "documentation": {}
    },
    {
        "label": "log_security_event",
        "kind": 2,
        "importPath": "security",
        "description": "security",
        "peekOfCode": "def log_security_event(event_type: str, details: str):\n    \"\"\"Centralized security logging with stack trace\"\"\"\n    logger = logging.getLogger('security')\n    logger.warning(\n        f\"Security event [{event_type}]: {details}\\n\"\n        f\"Stack trace: {''.join(traceback.format_stack())}\"\n    )\ndef validate_environment() -> bool:\n    \"\"\"Check for secure execution environment\"\"\"\n    try:",
        "detail": "security",
        "documentation": {}
    },
    {
        "label": "validate_environment",
        "kind": 2,
        "importPath": "security",
        "description": "security",
        "peekOfCode": "def validate_environment() -> bool:\n    \"\"\"Check for secure execution environment\"\"\"\n    try:\n        # Check for restricted PATH\n        path = os.environ.get('PATH', '')\n        if '/usr/local/sbin' in path or '/usr/sbin' in path:\n            return False\n        # Check for safe umask\n        if os.umask(0) != 0o077:\n            return False",
        "detail": "security",
        "documentation": {}
    }
]